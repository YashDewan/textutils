{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/Textarea.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","mystyle","color","mode","backgroundColor","react_default","a","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","concat","react_router_dom","to","title","aria-label","aria-current","role","onClick","togglemode","htmlFor","Textarea","_useState","useState","_useState2","Object","slicedToArray","text","settext","Fragment","heading","value","onChange","event","target","rows","disabled","length","upperText","toUpperCase","showAlert","lowerText","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","filter","elem","Alert","word","heigth","alert","slice","msg","defaultProps","App","setmode","_useState3","_useState4","setalert","alertType","message","setTimeout","body","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.69317fc7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [modeBtn, setModeBtn] = useState(\"Enable Dark Mode\");\r\n\r\n    // const [mystyle, setmystyle] = useState({\r\n    //     backgroundColor: \"white\",\r\n    //     color: \"black\"\r\n    // });\r\n\r\n    // let switchMode = () => {\r\n    //     if (mystyle.backgroundColor === \"white\") {\r\n    //         setmystyle({\r\n    //             backgroundColor: \"#212529\",\r\n    //             color: \"white\",\r\n    //             border: \"1px solid white\"\r\n    //         });\r\n    //         setModeBtn(\"Enable Light Mode\");\r\n    //     } else {\r\n    //         setmystyle({\r\n    //             backgroundColor: \"white\",\r\n    //             color: \"black\",\r\n    //         });\r\n    //         setModeBtn(\"Enable Dark Mode\");\r\n    //     }\r\n    // }\r\n\r\n\r\n    let mystyle = {\r\n        color : props.mode === 'dark'?'white':'black',\r\n        backgroundColor : props.mode === 'dark'?'#121111':'white',\r\n    }\r\n\r\n    return (\r\n        <div className=\"container my-3\" style={{color : props.mode === 'dark'?'white':'black'}}>\r\n            <h2>About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Free to Use \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Repellendus voluptatum aliquam deserunt cum atque deleniti, tenetur perspiciatis inventore eligendi, voluptate vitae blanditiis consectetur molestias, aut obcaecati porro molestiae sed provident.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Analyze your text\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Repellendus voluptatum aliquam deserunt cum atque deleniti, tenetur perspiciatis inventore eligendi, voluptate vitae blanditiis consectetur molestias, aut obcaecati porro molestiae sed provident.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Dark mode is also available\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Repellendus voluptatum aliquam deserunt cum atque deleniti, tenetur perspiciatis inventore eligendi, voluptate vitae blanditiis consectetur molestias, aut obcaecati porro molestiae sed provident.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <button className='btn btn-primary my-3' onClick={switchMode}>{modeBtn}</button> */}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link to=\"/\" className=\"navbar-brand\" >{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\" aria-current=\"page\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"about\" className=\"nav-link\">About Us</Link>\r\n                        </li>\r\n                    </ul>\r\n\r\n\r\n\r\n                    {/* TOGGLE MODE FOR DARK MODE */}\r\n\r\n                    <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n\r\n                        {/* EXTRA COLORS : */}\r\n\r\n                        {/* <i className=\"mx-2 fa fa-circle\" onClick={() => {props.togglemode('dark')}} style={{ color: '#000000', fontSize: '28px', cursor: 'pointer' }}></i>\r\n                        <i className=\"mx-2 fa fa-circle\" onClick={() => {props.togglemode('success')}} style={{ color: 'green', fontSize: '28px', cursor: 'pointer' }}></i>\r\n                        <i className=\"mx-2 fa fa-circle\" onClick={() => {props.togglemode('warning')}} style={{ color: 'yellow', fontSize: '28px', cursor: 'pointer' }}></i>\r\n                        <i className=\"mx-2 fa fa-circle\" onClick={() => {props.togglemode('primary')}} style={{ color: 'blue', fontSize: '28px', cursor: 'pointer' }}></i> */}\r\n\r\n                        {/* toggle btn for dark/ligth modes : */}\r\n\r\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode} />\r\n                        <label className=\"mx-1 form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode} mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n    );\r\n\r\n}\r\n\r\n// proptypes : \r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: \"TextUtils\"\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textarea(props) {\r\n\r\n    const [text, settext] = useState(\"\");\r\n\r\n    let clickUp = () => {\r\n        let upperText = text.toUpperCase();\r\n        settext(upperText);\r\n        props.showAlert(\"success\" , \"Converted to UpperCase\");\r\n    }\r\n\r\n    let clickLow = () => {\r\n        let lowerText = text.toLowerCase();\r\n        settext(lowerText);\r\n        props.showAlert(\"success\" , \"Converted to LowerCase\");\r\n    }\r\n\r\n    let clickClear = () => {\r\n        let newtext = \"\";\r\n        settext(newtext);\r\n        props.showAlert(\"success\" , \"Cleared..\");\r\n    }\r\n    let copyText = () => {\r\n        let text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"success\" , \"Copied Successfully\");\r\n    }\r\n\r\n    let handleOnChange = (event) => {\r\n        settext(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-3 container my-3\" style={{color : props.mode === \"dark\" ? \"white\" : \"black\"}}>\r\n                <h1>{props.heading}</h1>\r\n                <textarea style={{backgroundColor : props.mode === \"light\" ? \"white\" : \"black\" , color : props.mode === \"dark\" ? \"white\" : \"black\"}} className=\"form-control\" id=\"exampleFormControlTextarea1\" value={text} onChange={handleOnChange} rows=\"9\"></textarea>\r\n                <button disabled = {text.length===0} className='btn btn-secondary my-3 mx-2' onClick={clickUp}>UpperCase</button>\r\n                <button disabled = {text.length===0} className='btn btn-secondary my-3 mx-2' onClick={clickLow}>LowerCase</button>\r\n                <button disabled = {text.length===0} className='btn btn-secondary my-3 mx-2' onClick={copyText}>Copy Text</button>\r\n                <button disabled = {text.length===0} className='btn btn-secondary my-3 mx-2' onClick={clickClear}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\"  style={{color : props.mode === \"dark\" ? \"white\" : \"black\"}}>\r\n                <h1>Text Summary</h1>\r\n                <p>Word Count : {text.split(/\\s+/).filter((elem)=>{return elem.length!==0}).length} | Character Count : {text.length} | Line Count : {text.split(\"\\n\").length}</p>\r\n                <h1>Text Preview</h1>\r\n                <p>{text.length > 0 ? text :\"Enter something to preview ...\"}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    let capatalize = (word) => {\r\n        let str = word[0].toUpperCase();\r\n        return str + word.slice(1);\r\n    }\r\n    return (\r\n        <div style = {{heigth : '50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capatalize(props.alert.type)} : {props.alert.msg}</strong>\r\n            </div>}\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from 'react';\nimport About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport Textarea from \"./Components/Textarea\";\nimport Alert from \"./Components/Alert\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n//   HashRouter,\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n    // dark/light modes : \n    const [mode, setmode] = useState(\"light\");\n\n    // for adding more colors : \n    // let removecolors = () => {\n    //     document.body.classList.remove('bg-primary');\n    //     document.body.classList.remove('bg-success');\n    //     // document.body.classList.remove('bg-dark');\n    //     document.body.classList.remove('bg-warning');\n    // }\n\n    const togglemode = (color) => {\n        // // for adding more colors : \n        // removecolors();\n        // document.body.classList.add('bg-'+color);\n        if (mode === \"light\") {\n            setmode(\"dark\");\n            document.body.style.backgroundColor = \"black\";\n            showAlert(\"success\", \"Dark mode is enabled successfully\");\n            document.title = 'TextUtils - Dark Mode';\n        } else {\n            setmode(\"light\");\n            document.body.style.backgroundColor = \"white\";\n            showAlert(\"success\", \"Light mode is enabled successfully\");\n            document.title = 'TextUtils - Light Mode';\n        }\n    }\n\n    // alert box :  \n    const [alert, setalert] = useState(null);\n\n    let showAlert = (alertType, message) => {\n        setalert({\n            type: alertType,\n            msg: message\n        });\n\n        setTimeout(() => {\n            setalert(null)\n        }, 3000);\n    }\n\n    return (\n        <>  \n            <BrowserRouter>\n            <Navbar title=\"TestUtils\" mode={mode} togglemode={togglemode} />\n            <Alert alert={alert} />      \n                <Routes>\n                    <Route exact path=\"/\" element={<Textarea heading=\"Enter Your Text here : \" mode={mode} showAlert={showAlert} />} />\n                    <Route exact path=\"/about\" element={<About mode = {mode} />} />\n                </Routes>\n            </BrowserRouter>\n        </>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}